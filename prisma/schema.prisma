generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  clerkId     String       @unique
  name        String
  email       String       @unique
  username    String?  
  image       String?  
  quizResults QuizResult[]
  userAnswers UserAnswer[]
  PhishingResult PhishingResult[]
  PhishingModuleResult PhishingModuleResult[]
}

model Quiz {
  id          String       @id @default(cuid())
  title       String
  description String
  difficulty  String       @default("Łatwy")
  timeEstimate String      @default("10 min")
  slug        String       @unique // dla URL-i jak "security_basics"
  questions   Question[]
  quizResults QuizResult[]
  createdAt   DateTime     @default(now())
  isActive    Boolean      @default(true)
}

model Question {
  id              String       @id @default(cuid())
  text            String
  quiz            Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  options         Option[]
  correctOptionId String?
  userAnswers     UserAnswer[]
  order           Int
}

model Option {
  id          String       @id @default(cuid())
  text        String
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String
  userAnswers UserAnswer[]
  order       Int
}

model QuizResult {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  quiz           Quiz         @relation(fields: [quizId], references: [id])
  quizId         String
  score          Int
  totalQuestions Int
  userAnswers    UserAnswer[]
  completedAt    DateTime     @default(now())
  
  @@unique([userId, quizId])
}

model UserAnswer {
  id               String     @id @default(cuid())
  user             User       @relation(fields: [userId], references: [id])
  userId           String
  question         Question   @relation(fields: [questionId], references: [id])
  questionId       String
  selectedOption   Option     @relation(fields: [selectedOptionId], references: [id])
  selectedOptionId String
  quizResult       QuizResult @relation(fields: [quizResultId], references: [id])
  quizResultId     String
  isCorrect        Boolean
  answeredAt       DateTime   @default(now())
}

model PhishingScenario {
  id          String       @id @default(cuid())
  moduleId    String       // np. "email-phishing", "website-phishing"
  title       String
  description String
  content     Json         // treść scenariusza (email, sms, itp.)
  isPhishing  Boolean
  redFlags    String[]
  explanation String
  difficulty  String
  order       Int
  createdAt   DateTime     @default(now())
  phishingResults PhishingResult[]
}

model PhishingResult {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  scenario    PhishingScenario @relation(fields: [scenarioId], references: [id])
  scenarioId  String
  userAnswer  Boolean      // czy użytkownik uznał za phishing
  isCorrect   Boolean
  answeredAt  DateTime     @default(now())
  
  @@unique([userId, scenarioId])
}

model PhishingModuleResult {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  moduleId    String
  score       Int
  totalScenarios Int
  completedAt DateTime     @default(now())
  
  @@unique([userId, moduleId])
}
